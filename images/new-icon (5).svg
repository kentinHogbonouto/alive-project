<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="Alive_Logo" data-name="Alive Logo" width="124.475" height="32.009" viewBox="0 0 124.475 32.009"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <defs>
    <clipPath id="clip-path">
      <rect id="Rectangle_17" data-name="Rectangle 17" width="124.475" height="32.009" fill="none"/>
    </clipPath>
  </defs>
  <g id="Group_3" data-name="Group 3" transform="translate(0 0)">
    <rect id="Rectangle_14" data-name="Rectangle 14" width="6.72" height="31.277" transform="translate(63.354 0.07)"/>
    <rect id="Rectangle_15" data-name="Rectangle 15" width="6.72" height="21.973" transform="translate(73.409 9.374)"/>
    <rect id="Rectangle_16" data-name="Rectangle 16" width="6.72" height="6.284" transform="translate(73.409 0.062)"/>
    <path id="Path_2" data-name="Path 2" d="M212.277,44.972h-6.764L196.493,23h7.3l5.084,13.661L213.56,23h7.074Z" transform="translate(-116.413 -13.625)"/>
    <g id="Group_2" data-name="Group 2" transform="translate(0 0)">
      <g id="Group_1" data-name="Group 1" transform="translate(0 0)" clip-path="url(#clip-path)">
        <path id="Path_3" data-name="Path 3" d="M273.083,37.686c-1.061,3.8-4.554,6.986-10.124,6.986-6.057,0-11.451-4.333-11.451-11.716,0-7.074,5.261-11.583,10.964-11.583,6.809,0,11.009,4.2,11.009,11.274a14.005,14.005,0,0,1-.132,2.077h-15.3a4.755,4.755,0,0,0,5,4.245,4.245,4.245,0,0,0,4.422-2.874Zm-6.1-7.295c-.088-1.68-1.238-3.714-4.421-3.714a4.187,4.187,0,0,0-4.378,3.714Z" transform="translate(-149.006 -12.662)"/>
        <path id="Path_4" data-name="Path 4" d="M58.252,31.346H50.917L63.5,0H70.21Z" transform="translate(-30.166 0)" fill="#ffba00"/>
        <path id="Path_5" data-name="Path 5" d="M32.836,31.346H25.5L38.082,0h6.712Z" transform="translate(-15.108 0)" fill="#b800c7"/>
        <path id="Path_6" data-name="Path 6" d="M7.336,31.346H0L12.581,0h6.712Z" transform="translate(0 0)" fill="#00b2ff"/>
        <path id="Path_7" data-name="Path 7" d="M102.042,31.346h7.6L97.974,0h-8.09l-11.8,31.346h7.339l1.636-4.62h13.351ZM89.972,18.613,93.819,7.781l3.758,10.832.606,1.746H89.341Z" transform="translate(-46.258 0)"/>
      </g>
    </g>
  </g>
</svg>